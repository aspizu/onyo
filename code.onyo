-- onyo primer --
-----------------
-- onyo is a very simple interpreted
-- automatic memory managed programming
-- language written in Rust.

-- onyo requires a compiler frontend.
-- the text frontend is written in Python.
-- There are plans for a visual web frontend like Scratch.

-- onyo only supports global functions.
-- closures aren't supported.

-- onyo automatically executes the function named "main"
main() = 
   print("Hello, World!")
   ;

-- onyo only supports local variables.
-- all variables are initialized to nil.
-- arguments are variables. onyo does not support
-- variadic arguments or default arguments.
foo(a, b) =
   print(c) --> nil
   c = a + b
   ;

-- onyo supports two forms of loops.
-- onyo does not support breaking out of loops.

i = 0
while i < 100
   print(i)
   i += 1
   ;

i = 0
do
   print(i)
   i += 1
while i < 100

-- conditional statements

if condition
   then()
elif condition2
   then()
else
   otherwise()
   ;

-- conditional expressions
print(if condition then x else y) 

--- if x is truthy, then returns x else evals y
print(x or y)

-- if x is truthy, then evals y else returns x
print(x and y)

-- data types

-- type dict is hashtable of strings to any value
my_dict = {a: 1, b: 2, c: 3}

--  dynamic arrays
my_list = [1, 2, 3]

parser = {
   tokens: [],
   i: 0
}

expect(parser, token) = 
   if parser.tokens[parser.i] == token
      parser.i += 1
      return parser.tokens[parser.i - 1]
      ;
   ;


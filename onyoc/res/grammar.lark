start: (func|structdef)*
func: "ðŸ§…"? IDENT "(" _identlist ")" ["->" type] block
structdef: IDENT "{" (IDENT [":" type] ","?)* func* "}"
block: "{" exec* "}"
exec: assign | whilebranch | forloop | dowhile | call | ifblock | ifelse | ifelif | ifelifelse | execexpr | ret | setfield
ret: "return" expr
execexpr: "eval" expr
assign: IDENT [":" type] "=" expr
whilebranch: "while" expr block 
forloop: "for" IDENT "in" expr block
dowhile: "do" block "while" expr
ifblock: "if" expr block 
ifelse: "if" expr block "else" block 
ifelif: "if" expr block ("elif" expr block)+ 
ifelifelse: "if" expr block ("elif" expr block)+ "else" block 
var: IDENT
expr: NIL | BOOL | INT | FLOAT |  STRING
    | var
    | IDENT ":" [type] "=" expr -> assign
    | expr "." IDENT ":=" expr -> setfield
    | branch
    | orbranch
    | andbranch
    | neq
    | eq | identity
    | lt
    | gt
    | leq
    | geq
    | leftshift
    | rightshift
    | bitor
    | bitxor
    | bitand
    | add
    | sub
    | mul
    | div
    | modulo
    | bitnot
    | knot
    | minus
    | getitem
    | getfield
    | call
    | vcall
    | list
    | tuple
    | struct
    | "(" expr ")"
tuple: "{" _exprlist "}"
list: "[" _exprlist "]"
struct: IDENT "{" (IDENT "=" expr ","?)* "}"
branch: "if" expr "then" expr "else" expr
orbranch: expr "or" expr
andbranch: expr "and" expr 
neq: expr "!=" expr
eq: expr "==" expr
identity: expr "is" expr
lt: expr "<" expr
gt: expr ">" expr
leq: expr "<=" expr
geq: expr ">=" expr
leftshift: expr "<<" expr
rightshift: expr ">>" expr
bitor: expr "|" expr
bitxor: expr "^" expr
bitand: expr "&" expr
add: expr "+" expr
sub: expr "-" expr
mul: expr "*" expr
div: expr "/" expr
modulo: expr "%" expr
bitnot: "~" expr
knot: "not" expr
minus: "-" expr
getitem: expr "[" expr "]"
setfield: expr "." IDENT "=" expr
getfield: expr "." IDENT
vcall: expr "(" _exprlist ")"
call: IDENT "(" _exprlist ")"
_exprlist: [expr ("," expr)*] 
_identlist: [IDENT ("," IDENT)*] 
_typelist: [type ("," type)*]
type: NIL | "bool" | "int" | "float" | "str" | "any" | "never"
    | "{" _typelist "}" -> typetuplefinite
    | "[" _typelist "]" -> typelistfinite
    | "tuple" "(" type ")" -> typetuple
    | "list" "(" type ")" -> typelist
    | "err" "(" type ")" -> typeerr
    | type ("|" type)+ -> typeunion
    | IDENT -> typevar
NIL: "nil"
BOOL: "true" | "false"
CPP_COMMENT: ";" /[^\n]*/
C_COMMENT: "/-" /(.|\n)*?/ "-/"
%import common.ESCAPED_STRING -> STRING
%import common.CNAME -> IDENT
%import common.SIGNED_INT -> INT
%import common.SIGNED_FLOAT -> FLOAT
%import common.WS
%ignore WS
%ignore C_COMMENT
%ignore CPP_COMMENT
